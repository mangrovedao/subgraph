// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Credit extends ethereum.Event {
  get params(): Credit__Params {
    return new Credit__Params(this);
  }
}

export class Credit__Params {
  _event: Credit;

  constructor(event: Credit) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Debit extends ethereum.Event {
  get params(): Debit__Params {
    return new Debit__Params(this);
  }
}

export class Debit__Params {
  _event: Debit;

  constructor(event: Debit) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Kill extends ethereum.Event {
  get params(): Kill__Params {
    return new Kill__Params(this);
  }
}

export class Kill__Params {
  _event: Kill;

  constructor(event: Kill) {
    this._event = event;
  }
}

export class NewMgv extends ethereum.Event {
  get params(): NewMgv__Params {
    return new NewMgv__Params(this);
  }
}

export class NewMgv__Params {
  _event: NewMgv;

  constructor(event: NewMgv) {
    this._event = event;
  }
}

export class OfferFail extends ethereum.Event {
  get params(): OfferFail__Params {
    return new OfferFail__Params(this);
  }
}

export class OfferFail__Params {
  _event: OfferFail;

  constructor(event: OfferFail) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get takerWants(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get takerGives(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get mgvData(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class OfferRetract extends ethereum.Event {
  get params(): OfferRetract__Params {
    return new OfferRetract__Params(this);
  }
}

export class OfferRetract__Params {
  _event: OfferRetract;

  constructor(event: OfferRetract) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get deprovision(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class OfferSuccess extends ethereum.Event {
  get params(): OfferSuccess__Params {
    return new OfferSuccess__Params(this);
  }
}

export class OfferSuccess__Params {
  _event: OfferSuccess;

  constructor(event: OfferSuccess) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get taker(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get takerWants(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get takerGives(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OfferWrite extends ethereum.Event {
  get params(): OfferWrite__Params {
    return new OfferWrite__Params(this);
  }
}

export class OfferWrite__Params {
  _event: OfferWrite;

  constructor(event: OfferWrite) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get wants(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get gives(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get gasprice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get gasreq(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get id(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get prev(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OrderComplete extends ethereum.Event {
  get params(): OrderComplete__Params {
    return new OrderComplete__Params(this);
  }
}

export class OrderComplete__Params {
  _event: OrderComplete;

  constructor(event: OrderComplete) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get taker(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get takerGot(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get takerGave(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get feePaid(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class OrderStart extends ethereum.Event {
  get params(): OrderStart__Params {
    return new OrderStart__Params(this);
  }
}

export class OrderStart__Params {
  _event: OrderStart;

  constructor(event: OrderStart) {
    this._event = event;
  }
}

export class PosthookFail extends ethereum.Event {
  get params(): PosthookFail__Params {
    return new PosthookFail__Params(this);
  }
}

export class PosthookFail__Params {
  _event: PosthookFail;

  constructor(event: PosthookFail) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get offerId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get posthookData(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class SetActive extends ethereum.Event {
  get params(): SetActive__Params {
    return new SetActive__Params(this);
  }
}

export class SetActive__Params {
  _event: SetActive;

  constructor(event: SetActive) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class SetDensity extends ethereum.Event {
  get params(): SetDensity__Params {
    return new SetDensity__Params(this);
  }
}

export class SetDensity__Params {
  _event: SetDensity;

  constructor(event: SetDensity) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetFee extends ethereum.Event {
  get params(): SetFee__Params {
    return new SetFee__Params(this);
  }
}

export class SetFee__Params {
  _event: SetFee;

  constructor(event: SetFee) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetGasbase extends ethereum.Event {
  get params(): SetGasbase__Params {
    return new SetGasbase__Params(this);
  }
}

export class SetGasbase__Params {
  _event: SetGasbase;

  constructor(event: SetGasbase) {
    this._event = event;
  }

  get outbound_tkn(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get offer_gasbase(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SetGasmax extends ethereum.Event {
  get params(): SetGasmax__Params {
    return new SetGasmax__Params(this);
  }
}

export class SetGasmax__Params {
  _event: SetGasmax;

  constructor(event: SetGasmax) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetGasprice extends ethereum.Event {
  get params(): SetGasprice__Params {
    return new SetGasprice__Params(this);
  }
}

export class SetGasprice__Params {
  _event: SetGasprice;

  constructor(event: SetGasprice) {
    this._event = event;
  }

  get value(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class SetGovernance extends ethereum.Event {
  get params(): SetGovernance__Params {
    return new SetGovernance__Params(this);
  }
}

export class SetGovernance__Params {
  _event: SetGovernance;

  constructor(event: SetGovernance) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetMonitor extends ethereum.Event {
  get params(): SetMonitor__Params {
    return new SetMonitor__Params(this);
  }
}

export class SetMonitor__Params {
  _event: SetMonitor;

  constructor(event: SetMonitor) {
    this._event = event;
  }

  get value(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SetNotify extends ethereum.Event {
  get params(): SetNotify__Params {
    return new SetNotify__Params(this);
  }
}

export class SetNotify__Params {
  _event: SetNotify;

  constructor(event: SetNotify) {
    this._event = event;
  }

  get value(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class SetUseOracle extends ethereum.Event {
  get params(): SetUseOracle__Params {
    return new SetUseOracle__Params(this);
  }
}

export class SetUseOracle__Params {
  _event: SetUseOracle;

  constructor(event: SetUseOracle) {
    this._event = event;
  }

  get value(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Mangrove__configResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  get_global(): BigInt {
    return this.value0;
  }

  get_local(): BigInt {
    return this.value1;
  }
}

export class Mangrove__configInfoResultGlobalStruct extends ethereum.Tuple {
  get monitor(): Address {
    return this[0].toAddress();
  }

  get useOracle(): boolean {
    return this[1].toBoolean();
  }

  get notify(): boolean {
    return this[2].toBoolean();
  }

  get gasprice(): BigInt {
    return this[3].toBigInt();
  }

  get gasmax(): BigInt {
    return this[4].toBigInt();
  }

  get dead(): boolean {
    return this[5].toBoolean();
  }
}

export class Mangrove__configInfoResultLocalStruct extends ethereum.Tuple {
  get active(): boolean {
    return this[0].toBoolean();
  }

  get fee(): BigInt {
    return this[1].toBigInt();
  }

  get density(): BigInt {
    return this[2].toBigInt();
  }

  get offer_gasbase(): BigInt {
    return this[3].toBigInt();
  }

  get lock(): boolean {
    return this[4].toBoolean();
  }

  get best(): BigInt {
    return this[5].toBigInt();
  }

  get last(): BigInt {
    return this[6].toBigInt();
  }
}

export class Mangrove__configInfoResult {
  value0: Mangrove__configInfoResultGlobalStruct;
  value1: Mangrove__configInfoResultLocalStruct;

  constructor(
    value0: Mangrove__configInfoResultGlobalStruct,
    value1: Mangrove__configInfoResultLocalStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getGlobal(): Mangrove__configInfoResultGlobalStruct {
    return this.value0;
  }

  getLocal(): Mangrove__configInfoResultLocalStruct {
    return this.value1;
  }
}

export class Mangrove__flashloanResult {
  value0: BigInt;
  value1: Bytes;

  constructor(value0: BigInt, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    return map;
  }

  getGasused(): BigInt {
    return this.value0;
  }

  getMakerData(): Bytes {
    return this.value1;
  }
}

export class Mangrove__flashloanInputSorStruct extends ethereum.Tuple {
  get outbound_tkn(): Address {
    return this[0].toAddress();
  }

  get inbound_tkn(): Address {
    return this[1].toAddress();
  }

  get offerId(): BigInt {
    return this[2].toBigInt();
  }

  get offer(): BigInt {
    return this[3].toBigInt();
  }

  get wants(): BigInt {
    return this[4].toBigInt();
  }

  get gives(): BigInt {
    return this[5].toBigInt();
  }

  get offerDetail(): BigInt {
    return this[6].toBigInt();
  }

  get global(): BigInt {
    return this[7].toBigInt();
  }

  get local(): BigInt {
    return this[8].toBigInt();
  }
}

export class Mangrove__marketOrderResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }
}

export class Mangrove__marketOrderForResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getTakerGot(): BigInt {
    return this.value0;
  }

  getTakerGave(): BigInt {
    return this.value1;
  }

  getBounty(): BigInt {
    return this.value2;
  }

  getFeePaid(): BigInt {
    return this.value3;
  }
}

export class Mangrove__offerInfoResultOfferStruct extends ethereum.Tuple {
  get prev(): BigInt {
    return this[0].toBigInt();
  }

  get next(): BigInt {
    return this[1].toBigInt();
  }

  get wants(): BigInt {
    return this[2].toBigInt();
  }

  get gives(): BigInt {
    return this[3].toBigInt();
  }
}

export class Mangrove__offerInfoResultOfferDetailStruct extends ethereum.Tuple {
  get maker(): Address {
    return this[0].toAddress();
  }

  get gasreq(): BigInt {
    return this[1].toBigInt();
  }

  get offer_gasbase(): BigInt {
    return this[2].toBigInt();
  }

  get gasprice(): BigInt {
    return this[3].toBigInt();
  }
}

export class Mangrove__offerInfoResult {
  value0: Mangrove__offerInfoResultOfferStruct;
  value1: Mangrove__offerInfoResultOfferDetailStruct;

  constructor(
    value0: Mangrove__offerInfoResultOfferStruct,
    value1: Mangrove__offerInfoResultOfferDetailStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getOffer(): Mangrove__offerInfoResultOfferStruct {
    return this.value0;
  }

  getOfferDetail(): Mangrove__offerInfoResultOfferDetailStruct {
    return this.value1;
  }
}

export class Mangrove__snipesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }

  getValue2(): BigInt {
    return this.value2;
  }

  getValue3(): BigInt {
    return this.value3;
  }

  getValue4(): BigInt {
    return this.value4;
  }
}

export class Mangrove__snipesForResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getSuccesses(): BigInt {
    return this.value0;
  }

  getTakerGot(): BigInt {
    return this.value1;
  }

  getTakerGave(): BigInt {
    return this.value2;
  }

  getBounty(): BigInt {
    return this.value3;
  }

  getFeePaid(): BigInt {
    return this.value4;
  }
}

export class Mangrove extends ethereum.SmartContract {
  static bind(address: Address): Mangrove {
    return new Mangrove("Mangrove", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowances(
    param0: Address,
    param1: Address,
    param2: Address,
    param3: Address
  ): BigInt {
    let result = super.call(
      "allowances",
      "allowances(address,address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromAddress(param3)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowances(
    param0: Address,
    param1: Address,
    param2: Address,
    param3: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowances",
      "allowances(address,address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromAddress(param2),
        ethereum.Value.fromAddress(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(
    outbound_tkn: Address,
    inbound_tkn: Address,
    spender: Address,
    value: BigInt
  ): boolean {
    let result = super.call(
      "approve",
      "approve(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_approve(
    outbound_tkn: Address,
    inbound_tkn: Address,
    spender: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "approve",
      "approve(address,address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(param0: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  best(outbound_tkn: Address, inbound_tkn: Address): BigInt {
    let result = super.call("best", "best(address,address):(uint256)", [
      ethereum.Value.fromAddress(outbound_tkn),
      ethereum.Value.fromAddress(inbound_tkn)
    ]);

    return result[0].toBigInt();
  }

  try_best(
    outbound_tkn: Address,
    inbound_tkn: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("best", "best(address,address):(uint256)", [
      ethereum.Value.fromAddress(outbound_tkn),
      ethereum.Value.fromAddress(inbound_tkn)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(outbound_tkn: Address, inbound_tkn: Address): Mangrove__configResult {
    let result = super.call(
      "config",
      "config(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn)
      ]
    );

    return new Mangrove__configResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_config(
    outbound_tkn: Address,
    inbound_tkn: Address
  ): ethereum.CallResult<Mangrove__configResult> {
    let result = super.tryCall(
      "config",
      "config(address,address):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Mangrove__configResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  configInfo(
    outbound_tkn: Address,
    inbound_tkn: Address
  ): Mangrove__configInfoResult {
    let result = super.call(
      "configInfo",
      "configInfo(address,address):((address,bool,bool,uint256,uint256,bool),(bool,uint256,uint256,uint256,bool,uint256,uint256))",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn)
      ]
    );

    return changetype<Mangrove__configInfoResult>(
      new Mangrove__configInfoResult(
        changetype<Mangrove__configInfoResultGlobalStruct>(result[0].toTuple()),
        changetype<Mangrove__configInfoResultLocalStruct>(result[1].toTuple())
      )
    );
  }

  try_configInfo(
    outbound_tkn: Address,
    inbound_tkn: Address
  ): ethereum.CallResult<Mangrove__configInfoResult> {
    let result = super.tryCall(
      "configInfo",
      "configInfo(address,address):((address,bool,bool,uint256,uint256,bool),(bool,uint256,uint256,uint256,bool,uint256,uint256))",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Mangrove__configInfoResult>(
        new Mangrove__configInfoResult(
          changetype<Mangrove__configInfoResultGlobalStruct>(
            value[0].toTuple()
          ),
          changetype<Mangrove__configInfoResultLocalStruct>(value[1].toTuple())
        )
      )
    );
  }

  flashloan(
    sor: Mangrove__flashloanInputSorStruct,
    taker: Address
  ): Mangrove__flashloanResult {
    let result = super.call(
      "flashloan",
      "flashloan((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address):(uint256,bytes32)",
      [ethereum.Value.fromTuple(sor), ethereum.Value.fromAddress(taker)]
    );

    return new Mangrove__flashloanResult(
      result[0].toBigInt(),
      result[1].toBytes()
    );
  }

  try_flashloan(
    sor: Mangrove__flashloanInputSorStruct,
    taker: Address
  ): ethereum.CallResult<Mangrove__flashloanResult> {
    let result = super.tryCall(
      "flashloan",
      "flashloan((address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256),address):(uint256,bytes32)",
      [ethereum.Value.fromTuple(sor), ethereum.Value.fromAddress(taker)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Mangrove__flashloanResult(value[0].toBigInt(), value[1].toBytes())
    );
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isLive(offer: BigInt): boolean {
    let result = super.call("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offer)
    ]);

    return result[0].toBoolean();
  }

  try_isLive(offer: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(offer)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  locked(outbound_tkn: Address, inbound_tkn: Address): boolean {
    let result = super.call("locked", "locked(address,address):(bool)", [
      ethereum.Value.fromAddress(outbound_tkn),
      ethereum.Value.fromAddress(inbound_tkn)
    ]);

    return result[0].toBoolean();
  }

  try_locked(
    outbound_tkn: Address,
    inbound_tkn: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked(address,address):(bool)", [
      ethereum.Value.fromAddress(outbound_tkn),
      ethereum.Value.fromAddress(inbound_tkn)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketOrder(
    outbound_tkn: Address,
    inbound_tkn: Address,
    takerWants: BigInt,
    takerGives: BigInt,
    fillWants: boolean
  ): Mangrove__marketOrderResult {
    let result = super.call(
      "marketOrder",
      "marketOrder(address,address,uint256,uint256,bool):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(takerWants),
        ethereum.Value.fromUnsignedBigInt(takerGives),
        ethereum.Value.fromBoolean(fillWants)
      ]
    );

    return new Mangrove__marketOrderResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_marketOrder(
    outbound_tkn: Address,
    inbound_tkn: Address,
    takerWants: BigInt,
    takerGives: BigInt,
    fillWants: boolean
  ): ethereum.CallResult<Mangrove__marketOrderResult> {
    let result = super.tryCall(
      "marketOrder",
      "marketOrder(address,address,uint256,uint256,bool):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(takerWants),
        ethereum.Value.fromUnsignedBigInt(takerGives),
        ethereum.Value.fromBoolean(fillWants)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Mangrove__marketOrderResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  marketOrderFor(
    outbound_tkn: Address,
    inbound_tkn: Address,
    takerWants: BigInt,
    takerGives: BigInt,
    fillWants: boolean,
    taker: Address
  ): Mangrove__marketOrderForResult {
    let result = super.call(
      "marketOrderFor",
      "marketOrderFor(address,address,uint256,uint256,bool,address):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(takerWants),
        ethereum.Value.fromUnsignedBigInt(takerGives),
        ethereum.Value.fromBoolean(fillWants),
        ethereum.Value.fromAddress(taker)
      ]
    );

    return new Mangrove__marketOrderForResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_marketOrderFor(
    outbound_tkn: Address,
    inbound_tkn: Address,
    takerWants: BigInt,
    takerGives: BigInt,
    fillWants: boolean,
    taker: Address
  ): ethereum.CallResult<Mangrove__marketOrderForResult> {
    let result = super.tryCall(
      "marketOrderFor",
      "marketOrderFor(address,address,uint256,uint256,bool,address):(uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(takerWants),
        ethereum.Value.fromUnsignedBigInt(takerGives),
        ethereum.Value.fromBoolean(fillWants),
        ethereum.Value.fromAddress(taker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Mangrove__marketOrderForResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offerDetails(param0: Address, param1: Address, param2: BigInt): BigInt {
    let result = super.call(
      "offerDetails",
      "offerDetails(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_offerDetails(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offerDetails",
      "offerDetails(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  offerInfo(
    outbound_tkn: Address,
    inbound_tkn: Address,
    offerId: BigInt
  ): Mangrove__offerInfoResult {
    let result = super.call(
      "offerInfo",
      "offerInfo(address,address,uint256):((uint256,uint256,uint256,uint256),(address,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(offerId)
      ]
    );

    return changetype<Mangrove__offerInfoResult>(
      new Mangrove__offerInfoResult(
        changetype<Mangrove__offerInfoResultOfferStruct>(result[0].toTuple()),
        changetype<Mangrove__offerInfoResultOfferDetailStruct>(
          result[1].toTuple()
        )
      )
    );
  }

  try_offerInfo(
    outbound_tkn: Address,
    inbound_tkn: Address,
    offerId: BigInt
  ): ethereum.CallResult<Mangrove__offerInfoResult> {
    let result = super.tryCall(
      "offerInfo",
      "offerInfo(address,address,uint256):((uint256,uint256,uint256,uint256),(address,uint256,uint256,uint256))",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(offerId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Mangrove__offerInfoResult>(
        new Mangrove__offerInfoResult(
          changetype<Mangrove__offerInfoResultOfferStruct>(value[0].toTuple()),
          changetype<Mangrove__offerInfoResultOfferDetailStruct>(
            value[1].toTuple()
          )
        )
      )
    );
  }

  offers(param0: Address, param1: Address, param2: BigInt): BigInt {
    let result = super.call(
      "offers",
      "offers(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return result[0].toBigInt();
  }

  try_offers(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "offers",
      "offers(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  retractOffer(
    outbound_tkn: Address,
    inbound_tkn: Address,
    offerId: BigInt,
    deprovision: boolean
  ): BigInt {
    let result = super.call(
      "retractOffer",
      "retractOffer(address,address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(offerId),
        ethereum.Value.fromBoolean(deprovision)
      ]
    );

    return result[0].toBigInt();
  }

  try_retractOffer(
    outbound_tkn: Address,
    inbound_tkn: Address,
    offerId: BigInt,
    deprovision: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "retractOffer",
      "retractOffer(address,address,uint256,bool):(uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigInt(offerId),
        ethereum.Value.fromBoolean(deprovision)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  snipes(
    outbound_tkn: Address,
    inbound_tkn: Address,
    targets: Array<Array<BigInt>>,
    fillWants: boolean
  ): Mangrove__snipesResult {
    let result = super.call(
      "snipes",
      "snipes(address,address,uint256[4][],bool):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigIntMatrix(targets),
        ethereum.Value.fromBoolean(fillWants)
      ]
    );

    return new Mangrove__snipesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_snipes(
    outbound_tkn: Address,
    inbound_tkn: Address,
    targets: Array<Array<BigInt>>,
    fillWants: boolean
  ): ethereum.CallResult<Mangrove__snipesResult> {
    let result = super.tryCall(
      "snipes",
      "snipes(address,address,uint256[4][],bool):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigIntMatrix(targets),
        ethereum.Value.fromBoolean(fillWants)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Mangrove__snipesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  snipesFor(
    outbound_tkn: Address,
    inbound_tkn: Address,
    targets: Array<Array<BigInt>>,
    fillWants: boolean,
    taker: Address
  ): Mangrove__snipesForResult {
    let result = super.call(
      "snipesFor",
      "snipesFor(address,address,uint256[4][],bool,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigIntMatrix(targets),
        ethereum.Value.fromBoolean(fillWants),
        ethereum.Value.fromAddress(taker)
      ]
    );

    return new Mangrove__snipesForResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_snipesFor(
    outbound_tkn: Address,
    inbound_tkn: Address,
    targets: Array<Array<BigInt>>,
    fillWants: boolean,
    taker: Address
  ): ethereum.CallResult<Mangrove__snipesForResult> {
    let result = super.tryCall(
      "snipesFor",
      "snipesFor(address,address,uint256[4][],bool,address):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(outbound_tkn),
        ethereum.Value.fromAddress(inbound_tkn),
        ethereum.Value.fromUnsignedBigIntMatrix(targets),
        ethereum.Value.fromBoolean(fillWants),
        ethereum.Value.fromAddress(taker)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Mangrove__snipesForResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  withdraw(amount: BigInt): boolean {
    let result = super.call("withdraw", "withdraw(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_withdraw(amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("withdraw", "withdraw(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get governance(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get gasprice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get gasmax(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ActivateCall extends ethereum.Call {
  get inputs(): ActivateCall__Inputs {
    return new ActivateCall__Inputs(this);
  }

  get outputs(): ActivateCall__Outputs {
    return new ActivateCall__Outputs(this);
  }
}

export class ActivateCall__Inputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get density(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get offer_gasbase(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ActivateCall__Outputs {
  _call: ActivateCall;

  constructor(call: ActivateCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeactivateCall extends ethereum.Call {
  get inputs(): DeactivateCall__Inputs {
    return new DeactivateCall__Inputs(this);
  }

  get outputs(): DeactivateCall__Outputs {
    return new DeactivateCall__Outputs(this);
  }
}

export class DeactivateCall__Inputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeactivateCall__Outputs {
  _call: DeactivateCall;

  constructor(call: DeactivateCall) {
    this._call = call;
  }
}

export class FlashloanCall extends ethereum.Call {
  get inputs(): FlashloanCall__Inputs {
    return new FlashloanCall__Inputs(this);
  }

  get outputs(): FlashloanCall__Outputs {
    return new FlashloanCall__Outputs(this);
  }
}

export class FlashloanCall__Inputs {
  _call: FlashloanCall;

  constructor(call: FlashloanCall) {
    this._call = call;
  }

  get sor(): FlashloanCallSorStruct {
    return changetype<FlashloanCallSorStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get taker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class FlashloanCall__Outputs {
  _call: FlashloanCall;

  constructor(call: FlashloanCall) {
    this._call = call;
  }

  get gasused(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get makerData(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class FlashloanCallSorStruct extends ethereum.Tuple {
  get outbound_tkn(): Address {
    return this[0].toAddress();
  }

  get inbound_tkn(): Address {
    return this[1].toAddress();
  }

  get offerId(): BigInt {
    return this[2].toBigInt();
  }

  get offer(): BigInt {
    return this[3].toBigInt();
  }

  get wants(): BigInt {
    return this[4].toBigInt();
  }

  get gives(): BigInt {
    return this[5].toBigInt();
  }

  get offerDetail(): BigInt {
    return this[6].toBigInt();
  }

  get global(): BigInt {
    return this[7].toBigInt();
  }

  get local(): BigInt {
    return this[8].toBigInt();
  }
}

export class FundCall extends ethereum.Call {
  get inputs(): FundCall__Inputs {
    return new FundCall__Inputs(this);
  }

  get outputs(): FundCall__Outputs {
    return new FundCall__Outputs(this);
  }
}

export class FundCall__Inputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FundCall__Outputs {
  _call: FundCall;

  constructor(call: FundCall) {
    this._call = call;
  }
}

export class Fund1Call extends ethereum.Call {
  get inputs(): Fund1Call__Inputs {
    return new Fund1Call__Inputs(this);
  }

  get outputs(): Fund1Call__Outputs {
    return new Fund1Call__Outputs(this);
  }
}

export class Fund1Call__Inputs {
  _call: Fund1Call;

  constructor(call: Fund1Call) {
    this._call = call;
  }
}

export class Fund1Call__Outputs {
  _call: Fund1Call;

  constructor(call: Fund1Call) {
    this._call = call;
  }
}

export class KillCall extends ethereum.Call {
  get inputs(): KillCall__Inputs {
    return new KillCall__Inputs(this);
  }

  get outputs(): KillCall__Outputs {
    return new KillCall__Outputs(this);
  }
}

export class KillCall__Inputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class KillCall__Outputs {
  _call: KillCall;

  constructor(call: KillCall) {
    this._call = call;
  }
}

export class MarketOrderCall extends ethereum.Call {
  get inputs(): MarketOrderCall__Inputs {
    return new MarketOrderCall__Inputs(this);
  }

  get outputs(): MarketOrderCall__Outputs {
    return new MarketOrderCall__Outputs(this);
  }
}

export class MarketOrderCall__Inputs {
  _call: MarketOrderCall;

  constructor(call: MarketOrderCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get takerWants(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get takerGives(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fillWants(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class MarketOrderCall__Outputs {
  _call: MarketOrderCall;

  constructor(call: MarketOrderCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class MarketOrderForCall extends ethereum.Call {
  get inputs(): MarketOrderForCall__Inputs {
    return new MarketOrderForCall__Inputs(this);
  }

  get outputs(): MarketOrderForCall__Outputs {
    return new MarketOrderForCall__Outputs(this);
  }
}

export class MarketOrderForCall__Inputs {
  _call: MarketOrderForCall;

  constructor(call: MarketOrderForCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get takerWants(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get takerGives(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fillWants(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }

  get taker(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class MarketOrderForCall__Outputs {
  _call: MarketOrderForCall;

  constructor(call: MarketOrderForCall) {
    this._call = call;
  }

  get takerGot(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get takerGave(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get bounty(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get feePaid(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }
}

export class NewOfferCall extends ethereum.Call {
  get inputs(): NewOfferCall__Inputs {
    return new NewOfferCall__Inputs(this);
  }

  get outputs(): NewOfferCall__Outputs {
    return new NewOfferCall__Outputs(this);
  }
}

export class NewOfferCall__Inputs {
  _call: NewOfferCall;

  constructor(call: NewOfferCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wants(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get gives(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get gasreq(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get gasprice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get pivotId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class NewOfferCall__Outputs {
  _call: NewOfferCall;

  constructor(call: NewOfferCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[7].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RetractOfferCall extends ethereum.Call {
  get inputs(): RetractOfferCall__Inputs {
    return new RetractOfferCall__Inputs(this);
  }

  get outputs(): RetractOfferCall__Outputs {
    return new RetractOfferCall__Outputs(this);
  }
}

export class RetractOfferCall__Inputs {
  _call: RetractOfferCall;

  constructor(call: RetractOfferCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get offerId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deprovision(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class RetractOfferCall__Outputs {
  _call: RetractOfferCall;

  constructor(call: RetractOfferCall) {
    this._call = call;
  }

  get provision(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetDensityCall extends ethereum.Call {
  get inputs(): SetDensityCall__Inputs {
    return new SetDensityCall__Inputs(this);
  }

  get outputs(): SetDensityCall__Outputs {
    return new SetDensityCall__Outputs(this);
  }
}

export class SetDensityCall__Inputs {
  _call: SetDensityCall;

  constructor(call: SetDensityCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get density(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetDensityCall__Outputs {
  _call: SetDensityCall;

  constructor(call: SetDensityCall) {
    this._call = call;
  }
}

export class SetFeeCall extends ethereum.Call {
  get inputs(): SetFeeCall__Inputs {
    return new SetFeeCall__Inputs(this);
  }

  get outputs(): SetFeeCall__Outputs {
    return new SetFeeCall__Outputs(this);
  }
}

export class SetFeeCall__Inputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fee(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetFeeCall__Outputs {
  _call: SetFeeCall;

  constructor(call: SetFeeCall) {
    this._call = call;
  }
}

export class SetGasbaseCall extends ethereum.Call {
  get inputs(): SetGasbaseCall__Inputs {
    return new SetGasbaseCall__Inputs(this);
  }

  get outputs(): SetGasbaseCall__Outputs {
    return new SetGasbaseCall__Outputs(this);
  }
}

export class SetGasbaseCall__Inputs {
  _call: SetGasbaseCall;

  constructor(call: SetGasbaseCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get offer_gasbase(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetGasbaseCall__Outputs {
  _call: SetGasbaseCall;

  constructor(call: SetGasbaseCall) {
    this._call = call;
  }
}

export class SetGasmaxCall extends ethereum.Call {
  get inputs(): SetGasmaxCall__Inputs {
    return new SetGasmaxCall__Inputs(this);
  }

  get outputs(): SetGasmaxCall__Outputs {
    return new SetGasmaxCall__Outputs(this);
  }
}

export class SetGasmaxCall__Inputs {
  _call: SetGasmaxCall;

  constructor(call: SetGasmaxCall) {
    this._call = call;
  }

  get gasmax(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGasmaxCall__Outputs {
  _call: SetGasmaxCall;

  constructor(call: SetGasmaxCall) {
    this._call = call;
  }
}

export class SetGaspriceCall extends ethereum.Call {
  get inputs(): SetGaspriceCall__Inputs {
    return new SetGaspriceCall__Inputs(this);
  }

  get outputs(): SetGaspriceCall__Outputs {
    return new SetGaspriceCall__Outputs(this);
  }
}

export class SetGaspriceCall__Inputs {
  _call: SetGaspriceCall;

  constructor(call: SetGaspriceCall) {
    this._call = call;
  }

  get gasprice(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetGaspriceCall__Outputs {
  _call: SetGaspriceCall;

  constructor(call: SetGaspriceCall) {
    this._call = call;
  }
}

export class SetGovernanceCall extends ethereum.Call {
  get inputs(): SetGovernanceCall__Inputs {
    return new SetGovernanceCall__Inputs(this);
  }

  get outputs(): SetGovernanceCall__Outputs {
    return new SetGovernanceCall__Outputs(this);
  }
}

export class SetGovernanceCall__Inputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }

  get governanceAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGovernanceCall__Outputs {
  _call: SetGovernanceCall;

  constructor(call: SetGovernanceCall) {
    this._call = call;
  }
}

export class SetMonitorCall extends ethereum.Call {
  get inputs(): SetMonitorCall__Inputs {
    return new SetMonitorCall__Inputs(this);
  }

  get outputs(): SetMonitorCall__Outputs {
    return new SetMonitorCall__Outputs(this);
  }
}

export class SetMonitorCall__Inputs {
  _call: SetMonitorCall;

  constructor(call: SetMonitorCall) {
    this._call = call;
  }

  get monitor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMonitorCall__Outputs {
  _call: SetMonitorCall;

  constructor(call: SetMonitorCall) {
    this._call = call;
  }
}

export class SetNotifyCall extends ethereum.Call {
  get inputs(): SetNotifyCall__Inputs {
    return new SetNotifyCall__Inputs(this);
  }

  get outputs(): SetNotifyCall__Outputs {
    return new SetNotifyCall__Outputs(this);
  }
}

export class SetNotifyCall__Inputs {
  _call: SetNotifyCall;

  constructor(call: SetNotifyCall) {
    this._call = call;
  }

  get notify(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetNotifyCall__Outputs {
  _call: SetNotifyCall;

  constructor(call: SetNotifyCall) {
    this._call = call;
  }
}

export class SetUseOracleCall extends ethereum.Call {
  get inputs(): SetUseOracleCall__Inputs {
    return new SetUseOracleCall__Inputs(this);
  }

  get outputs(): SetUseOracleCall__Outputs {
    return new SetUseOracleCall__Outputs(this);
  }
}

export class SetUseOracleCall__Inputs {
  _call: SetUseOracleCall;

  constructor(call: SetUseOracleCall) {
    this._call = call;
  }

  get useOracle(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetUseOracleCall__Outputs {
  _call: SetUseOracleCall;

  constructor(call: SetUseOracleCall) {
    this._call = call;
  }
}

export class SnipesCall extends ethereum.Call {
  get inputs(): SnipesCall__Inputs {
    return new SnipesCall__Inputs(this);
  }

  get outputs(): SnipesCall__Outputs {
    return new SnipesCall__Outputs(this);
  }
}

export class SnipesCall__Inputs {
  _call: SnipesCall;

  constructor(call: SnipesCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targets(): Array<Array<BigInt>> {
    return this._call.inputValues[2].value.toBigIntMatrix();
  }

  get fillWants(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class SnipesCall__Outputs {
  _call: SnipesCall;

  constructor(call: SnipesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get value2(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get value4(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }
}

export class SnipesForCall extends ethereum.Call {
  get inputs(): SnipesForCall__Inputs {
    return new SnipesForCall__Inputs(this);
  }

  get outputs(): SnipesForCall__Outputs {
    return new SnipesForCall__Outputs(this);
  }
}

export class SnipesForCall__Inputs {
  _call: SnipesForCall;

  constructor(call: SnipesForCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targets(): Array<Array<BigInt>> {
    return this._call.inputValues[2].value.toBigIntMatrix();
  }

  get fillWants(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get taker(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SnipesForCall__Outputs {
  _call: SnipesForCall;

  constructor(call: SnipesForCall) {
    this._call = call;
  }

  get successes(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get takerGot(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get takerGave(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get bounty(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get feePaid(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }
}

export class UpdateOfferCall extends ethereum.Call {
  get inputs(): UpdateOfferCall__Inputs {
    return new UpdateOfferCall__Inputs(this);
  }

  get outputs(): UpdateOfferCall__Outputs {
    return new UpdateOfferCall__Outputs(this);
  }
}

export class UpdateOfferCall__Inputs {
  _call: UpdateOfferCall;

  constructor(call: UpdateOfferCall) {
    this._call = call;
  }

  get outbound_tkn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get inbound_tkn(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wants(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get gives(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get gasreq(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get gasprice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get pivotId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get offerId(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class UpdateOfferCall__Outputs {
  _call: UpdateOfferCall;

  constructor(call: UpdateOfferCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get noRevert(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class WithdrawERC20Call extends ethereum.Call {
  get inputs(): WithdrawERC20Call__Inputs {
    return new WithdrawERC20Call__Inputs(this);
  }

  get outputs(): WithdrawERC20Call__Outputs {
    return new WithdrawERC20Call__Outputs(this);
  }
}

export class WithdrawERC20Call__Inputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawERC20Call__Outputs {
  _call: WithdrawERC20Call;

  constructor(call: WithdrawERC20Call) {
    this._call = call;
  }
}
