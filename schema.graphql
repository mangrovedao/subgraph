type Account @entity(immutable: true) {
  id: Bytes!
  address: Bytes!
}

type Market @entity {
  id: String!
  outbound_tkn: Bytes! # address
  inbound_tkn: Bytes! # address
  active: Boolean!
}

type Offer @entity {
  id: String!
  transactionHash: Bytes!
  offerId: BigInt!
  wants: BigInt!
  gives: BigInt!
  gasprice: BigInt!
  gasreq: BigInt!
  gasBase: BigInt!
  prev: BigInt!
  isOpen: Boolean!
  isFailed: Boolean!
  isFilled: Boolean!
  isRetracted: Boolean!
  failedReason: Bytes
  posthookFailReason: Bytes
  deprovisioned: Boolean!

  market: Market!
  maker: Account!
  kandel: Kandel
  owner: Account
}

type Order @entity {
  id: String!
  transactionHash: Bytes!

  taker: Bytes
  takerGot: BigInt
  takerGave: BigInt
  penalty: BigInt
  feePaid: BigInt

  limitOrder: LimitOrder 
}

type LimitOrder @entity {
  id: String!
  wants: BigInt!
  gives: BigInt!
  expiryDate: BigInt
  fillWants: Boolean!
  fillOrKill: Boolean!
  restingOrder: Boolean!
  realTaker: Bytes 
  offer: Offer

  order: Order! @derivedFrom(field: "limitOrder")

}

type KandelDepositWithdraw @entity {
  id: String!
  transactionHash: Bytes!
  date: BigInt!
  token: Bytes!
  amount: BigInt!
  isDeposit: Boolean!

  kandel: Kandel!
}

type Kandel @entity {
  id: Bytes!
  transactionHash: Bytes!
  seeder: Bytes!
  address: Bytes!

  base: Bytes!
  depositedBase: BigInt!
  depositedQuote: BigInt!

  totalBase: BigInt!
  totalQuote: BigInt!

  quote: Bytes!

  gasprice: BigInt
  
  owner: Account!

  offers: [Offer!]! @derivedFrom(field: "kandel")
  depositWithdraws: [KandelDepositWithdraw!]! @derivedFrom(field: "kandel")
}

type Context @entity {
  id: String!
  ids: String!
  last: Order
}


type GasBase @entity {
  id: String!
  gasbase: BigInt!
  inbound_tkn: Bytes!
  outbound_tkn: Bytes!
}
